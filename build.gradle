plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id("org.jetbrains.kotlin.plugin.noarg") version "$kotlinVersion"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "application"
    id "jacoco"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id "io.micronaut.application" version "$micronautPluginVersion"
}

version "0.1"
group "br.com.murilocorreiab.sleeepermanager"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "br.com.murilocorreiab.sleeepermanager.*"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt("org.mapstruct:mapstruct-processor:$mapStructVersion") {
        because("To allow mapstruct to run in kotlin processor")
    }
    compileOnly("org.graalvm.nativeimage:svm")
    kapt("io.micronaut.openapi:micronaut-openapi")
    kapt("io.micronaut.data:micronaut-data-processor")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("org.jetbrains.kotlin:kotlin-noarg")
    implementation("org.mapstruct:mapstruct:$mapStructVersion") {
        because("To map objects in a clear way")
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion") {
        because("To use kotlin coroutines when running asynchronous code")
    }
    implementation("io.projectreactor:reactor-core:$reactorVersion") {
        because("To use reactor types in http clients return, since flow is experimental")
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$kotlinxCoroutinesReactiveVersion") {
        because("To convert reactor types to coroutines")
    }
    implementation("io.micronaut.reactor:micronaut-reactor") {
        because("It's necessary to use reactor in micronaut 2.x.x")
    }
    implementation("io.micronaut.xml:micronaut-jackson-xml")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari") {
        because("To persist data in sql database")
    }
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa") {
        because("To persist data in sql database")
    }
    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinxCoroutinesVersion") {
        because("To use coroutines in unit tests")
    }
    testImplementation("io.projectreactor:reactor-test:$reactorVersion") {
        because("To use reactor types in http clients return, since flow is experimental")
    }
    testImplementation("com.github.tomakehurst:wiremock-jre8:$wiremockVersion") {
        because("Mock clients responses in integration tests")
    }
    testImplementation("com.h2database:h2:${h2DatabaseVersion}") {
        because("To use in memory sql database in test scope")
    }
}

test.classpath += configurations.developmentOnly

mainClassName = "br.com.murilocorreiab.sleepermanager.ApplicationKt"

// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    dependsOn test // tests are required to run before generating the report
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "br.com.murilocorreiab.*")
        arg("micronaut.processing.group", "br.com.murilocorreiab.sleepermanager")
        arg("micronaut.processing.module", "sleepermanager")
    }
}

shadowJar {
    mergeServiceFiles()
}

noArg {
    annotation("javax.persistence.Entity")
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart': 'true',
                'micronaut.io.watch.enabled': 'true',
                "micronaut.io.watch.paths": "src/main"
        )
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
