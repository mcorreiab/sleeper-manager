plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id("org.jetbrains.kotlin.plugin.noarg") version "$kotlinVersion"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "jacoco"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id "io.micronaut.application" version "$micronautPluginVersion"
}

version "0.1"
group "br.com.murilocorreiab.sleeepermanager"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental true
        annotations "br.com.murilocorreiab.sleeepermanager.*"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt("io.micronaut:micronaut-http-validation")
    kapt("org.mapstruct:mapstruct-processor:$mapStructVersion") {
        because("To allow mapstruct to run in kotlin processor")
    }
    kapt("io.micronaut.openapi:micronaut-openapi")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly("ch.qos.logback:logback-classic")
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")

    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    implementation("javax.annotation:javax.annotation-api")
    implementation("org.mapstruct:mapstruct:$mapStructVersion") {
        because("To map objects in a clear way")
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion") {
        because("To use kotlin coroutines when running asynchronous code")
    }
    implementation("javax.inject:javax.inject:1") {
        because("Mapstruct generates implementation using javax annotations")
    }

    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinxCoroutinesVersion") {
        because("To use coroutines in unit tests")
    }
    testImplementation("com.github.tomakehurst:wiremock-jre8:$wiremockVersion") {
        because("Mock clients responses in integration tests")
    }
    testImplementation("com.github.kstyrc:embedded-redis:$embededRedisVersion")
    testImplementation("org.assertj:assertj-core:$assertJVersion")

}

test.classpath += configurations.developmentOnly

application {
    mainClass.set("br.com.murilocorreiab.sleepermanager.ApplicationKt")
}

// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    dependsOn test // tests are required to run before generating the report
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart': 'true',
                'micronaut.io.watch.enabled': 'true',
                "micronaut.io.watch.paths": "src/main"
        )
    }
}

task installLocalGitHook(type: Copy) {
    from new File(rootProject.rootDir, "git-hooks/pre-commit")
    into { new File(rootProject.rootDir, ".git/hooks") }
    fileMode 0775
}

build.dependsOn installLocalGitHook
